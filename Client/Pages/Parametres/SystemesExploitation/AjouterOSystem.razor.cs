using Microsoft.AspNetCore.Components;
using MudBlazor;
using TestCoreHosted.Shared.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace TestCoreHosted.Client.Pages.Parametres.SystemesExploitation
{
    public partial class AjouterOSystem
    {
        [CascadingParameter] MudDialogInstance MudDialogInstance { get; set; }
        private bool error { get; set; }
        public bool IsBusy { get; set; } = false;
        private string message { get; set; }
        private Severity Severity { get; set; }
        [Parameter] public OSystem OSystem { get; set; } = new OSystem();
        public List<TypeO> TypeOs { get; set; } = new List<TypeO>();
        private async Task Save()
        {
            OSystem oSystem;
            if (OSystem.OId > 0)
            {
                oSystem = await oSystemService.PutAsync(OSystem.OId, OSystem);
                message = "Version de système d'exploitation mise à jour avec succès.";
                Severity = Severity.Success;
                error = true;
            }
            else
            {
                oSystem = await oSystemService.PostAsync(OSystem);
                message = "Version de système d'exploitation enregistré avec succès.";
                Severity = Severity.Success;
                error = true;
            }

            if (oSystem != null)
            {
                snackBar.Add(message, Severity);
                MudDialogInstance.Close(DialogResult.Ok(true));
            }
            else
            {
                message = "Une erreur s'est produite lors du traitement.";
                Severity = Severity.Error;
                snackBar.Add(message, Severity);
                error = true;
            }
        }

        async Task Load()
        {
            TypeOs = await typeOsService.GetAsync();
        }
        protected override async Task OnInitializedAsync()
        {
            await Load();
            StateHasChanged();
        }
    }
}
